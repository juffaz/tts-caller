(ns tts-caller.core
  (:gen-class)
  (:require [compojure.core :refer [GET defroutes routes]]
            [ring.adapter.jetty :refer [run-jetty]]
            [ring.util.response :as resp]
            [tts-caller.audio :as audio]
            [ring.middleware.params :refer [wrap-params]]
            [clojure.java.shell :refer [sh]]
            [clojure.core.async :refer [go]])
  (:import [java.io File]
           [java.lang ProcessBuilder]
           [java.util.concurrent TimeUnit]))

(def sip-user (or (System/getenv "SIP_USER") "python_client"))
(def sip-pass (or (System/getenv "SIP_PASS") "1234pass"))
(def sip-domain (or (System/getenv "SIP_HOST") "10.22.6.249"))
(def sip-port (or (System/getenv "SIP_PORT") "5060")) ; –ü–æ—Ä—Ç 5060 –¥–ª—è SIP-—Å–µ—Ä–≤–µ—Ä–∞

(def baresip-dir "/tmp/baresip_config")
(def accounts-path (str baresip-dir "/accounts"))
(def config-path (str baresip-dir "/config"))

(defn kill-baresip []
  (println "üõë –£–±–∏–≤–∞–µ–º baresip")
  (try
    (let [{:keys [exit err]} (sh "pkill" "-f" "baresip")]
      (if (zero? exit)
        (println "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã —É–±–∏—Ç—ã")
        (println "‚ö† –û—à–∏–±–∫–∞ –∏–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã:" err)))
    (Thread/sleep 1000)
    (catch Exception e
      (println "‚ö† –û—à–∏–±–∫–∞ pkill:" (.getMessage e))
      (try
        (let [{:keys [exit err]} (sh "killall" "baresip")]
          (if (zero? exit)
            (println "‚úÖ –£–±–∏—Ç—ã —á–µ—Ä–µ–∑ killall")
            (println "‚ö† –û—à–∏–±–∫–∞ killall:" err)))
        (Thread/sleep 1000)
        (catch Exception e2
          (println "‚ö† –û—à–∏–±–∫–∞ killall:" (.getMessage e2)))))))

(defn setup-baresip-config [wav]
  (println "üìÅ –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ baresip")
  (.mkdirs (File. baresip-dir))
  (println "‚úÖ –ü–∞–ø–∫–∞:" baresip-dir)

  (println "üìù –§–∞–π–ª accounts:" accounts-path)

  (let [acc (str "<sip:" sip-user "@" sip-domain ":" sip-port ">"
                 ";auth_user=" sip-user
                 ";auth_pass=" sip-pass
                 ";transport=udp\n")
        file (File. accounts-path)]
    (.createNewFile file)
    (spit file acc)
    (with-open [raf (java.io.RandomAccessFile. file "rw")]
      (.sync (.getFD raf)))
    (println "‚úÖ Accounts —Å–æ–∑–¥–∞–Ω")
    (println "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ accounts:\n" acc))

  (println "üìù Config:" config-path)
  (spit config-path
        (str
         "module_path /usr/lib64/baresip/modules\n"
         "module g711.so\n"
         "module stun.so\n"
         "module turn.so\n"
         "module contact.so\n"
         "module menu.so\n"
         "module aufile.so\n"
         "module sndfile.so\n"
         "module cons.so\n\n"
         "sip_transp udp\n"
         "sip_listen 0.0.0.0:" sip-port "\n"
         "audio_player aufile\n"
         "audio_source aufile\n"
         "audio_path " wav "\n"))
  (println "‚úÖ Config —Å–æ–∑–¥–∞–Ω"))


(defn call-sip [wav phone]
  (kill-baresip)
  (setup-baresip-config wav)
  (println "üìû –í—ã–∑–æ–≤:" phone)

  (println "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ SIP-—Å–µ—Ä–≤–µ—Ä–∞:" sip-domain)
  (try
    (let [{:keys [exit err]} (sh "nc" "-z" "-u" sip-domain "5060")]
      (if (zero? exit)
        (println "‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        (println "‚ö† –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:" err)))
    (catch Exception e
      (println "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏:" (.getMessage e))))

  (let [cmd ["baresip" "-f" baresip-dir "-v" "-d"]
        pb (doto (ProcessBuilder. cmd)
             (.redirectErrorStream true))
        proc (.start pb)
        writer (java.io.BufferedWriter.
                (java.io.OutputStreamWriter. (.getOutputStream proc)))
        reader (clojure.java.io/reader (.getInputStream proc))
        output (atom [])]

    (try
      (let [reader-thread
            (future
              (try
                (doseq [line (line-seq reader)]
                  (swap! output conj line)
                  (println "[BARESIP]:" line))
                (catch Exception e
                  (println "‚ö† –û—à–∏–±–∫–∞ –≤—ã–≤–æ–¥–∞ baresip:" (.getMessage e)))))]

        (println "‚è≥ –ñ–¥–µ–º baresip...")
        (Thread/sleep 10000)

        (if-not (.isAlive proc)
          (throw (Exception. "‚ùå Baresip –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")))

        (if (.exists (File. wav))
          (println "‚úÖ WAV:" wav)
          (throw (Exception. (str "‚ùå WAV –Ω–µ –Ω–∞–π–¥–µ–Ω: " wav))))

        (println "‚öô /ausrc")
        (.write writer (str "/ausrc aufile," wav "\n"))
        (.flush writer)
        (Thread/sleep 2000)

        (println "üìû /dial sip:" phone "@" sip-domain)
        (.write writer (str "/dial sip:" phone "@" sip-domain "\n"))
        (.flush writer)
        (Thread/sleep 60000)

        (println "üëã /quit")
        (.write writer "/quit\n")
        (.flush writer)

        (println "‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        (let [code (.waitFor proc 10000 TimeUnit/MILLISECONDS)]
          (println "‚Ñπ –ö–æ–¥ –≤—ã—Ö–æ–¥–∞:" code))

        (future-cancel reader-thread))

      (catch Exception e
        (println "‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞:" (.getMessage e))
        (throw e))
      (finally
        (try (.close writer) (catch Exception _))
        (try (.close reader) (catch Exception _))
        (try
          (when (.isAlive proc)
            (println "üõë –ó–∞–≤–µ—Ä—à–∞–µ–º baresip")
            (.destroy proc)
            (.waitFor proc 2000 TimeUnit/MILLISECONDS))
          (catch Exception e
            (println "‚ö† –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è:" (.getMessage e))))
        (println "üìú –õ–æ–≥ baresip:" (clojure.string/join "\n" @output))))))

(defn split-phones [s]
  (->> (clojure.string/split s #"[,\s]+")
       (remove clojure.string/blank?)))

(defn handle-call [{:keys [query-params]}]
  (let [{:strs [text phone]} query-params
        wav "/tmp/final.wav"]
    (if (and text phone)
      (let [phones (split-phones phone)]
        (println "üó£ –¢–µ–∫—Å—Ç:" text)
        (audio/generate-final-wav-auto text wav)
        (println "üìÅ WAV:" wav)
        (go
          (doseq [p phones]
            (try
              (call-sip wav p)
              (println "üìû –í—ã–∑–æ–≤:" p)
              (catch Exception e
                (println "‚ùå –û—à–∏–±–∫–∞:" p (.getMessage e))))))
        (resp/response (str "üìû –í—ã–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: " (clojure.string/join ", " phones)
                            " –æ—Ç " sip-user "@" sip-domain)))
      (resp/bad-request "‚ùå –ù–µ—Ç ?text=...&phone=..."))))

(defroutes app-routes
  (GET "/call" [] handle-call)
  (GET "/health" [] (resp/response "OK")))

(def app
  (wrap-params app-routes))

(defn -main []
  (println "‚úÖ TTS SIP Caller –Ω–∞ 8899: " sip-user "@" sip-domain ":" sip-port)
  (run-jetty app {:port 8899}))