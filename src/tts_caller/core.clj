(ns tts-caller.core
  (:gen-class)
  (:require [compojure.core :refer [GET defroutes routes]]
            [ring.adapter.jetty :refer [run-jetty]]
            [ring.util.response :as resp]
            [tts-caller.audio :as audio]
            [ring.middleware.params :refer [wrap-params]]
            [clojure.java.shell :refer [sh]]
            [clojure.core.async :refer [go]])
  (:import [java.io File]
           [java.lang ProcessBuilder]
           [java.util.concurrent TimeUnit]))

(def sip-user (or (System/getenv "SIP_USER") "python_client"))
(def sip-pass (or (System/getenv "SIP_PASS") "1234pass"))
(def sip-domain (or (System/getenv "SIP_HOST") "10.22.6.249"))
(def sip-port (or (System/getenv "SIP_PORT") "5062"))

(def baresip-home "/tmp/baresip_config")
(def accounts-path (str baresip-home "/accounts"))
(def config-path (str baresip-home "/config"))

(defn kill-existing-baresip []
  (println "üõë –£–±–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã baresip")
  (try
    (let [{:keys [exit out err]} (sh "pkill" "-f" "baresip")]
      (if (zero? exit)
        (println "‚úÖ –ü—Ä–æ—Ü–µ—Å—Å—ã baresip —É–±–∏—Ç—ã")
        (println "‚ö† –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –æ—à–∏–±–∫–∞:" err)))
    (Thread/sleep 1000)
    (catch Exception e
      (println "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–±–∏–π—Å—Ç–≤–µ —á–µ—Ä–µ–∑ pkill:" (.getMessage e))
      (try
        (let [{:keys [exit out err]} (sh "killall" "baresip")]
          (if (zero? exit)
            (println "‚úÖ –£–±–∏—Ç—ã —á–µ—Ä–µ–∑ killall")
            (println "‚ö† –û—à–∏–±–∫–∞ killall:" err)))
        (Thread/sleep 1000)
        (catch Exception e2
          (println "‚ö† –û—à–∏–±–∫–∞ killall:" (.getMessage e2)))))))

(defn ensure-baresip-config [final-wav]
  (println "üìÅ –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ baresip")
  (.mkdirs (File. baresip-home))
  (when (.exists (File. baresip-home))
    (println "‚úÖ –ü–∞–ø–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:" baresip-home))

  (println "üìù –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª accounts:" accounts-path)
  (let [acc-content (str "<sip:" sip-user "@" sip-domain ":" sip-port ">"
                         ";auth_user=" sip-user
                         ";auth_pass=" sip-pass
                         ";transport=udp\n")
        acc-file (File. accounts-path)]
    (.createNewFile acc-file)
    (spit acc-file acc-content)
    (with-open [raf (java.io.RandomAccessFile. acc-file "rw")]
      (let [fd (.getFD raf)]
        (.sync fd)))
    (println "‚úÖ –§–∞–π–ª accounts —Å–æ–∑–¥–∞–Ω"))

  (println "üìù –ü–∏—à–µ–º config:" config-path)
  (spit config-path
        (str "module_path /usr/lib64/baresip/modules\n"
             "module g711.so\n"
             "module aufile.so\n"
             "module cons.so\n\n"
             "sip_transp udp\n"
             "sip_listen 0.0.0.0:" sip-port "\n"
             "audio_player aufile\n"
             "audio_source aufile\n"
             "audio_path " final-wav "\n"))
  (println "‚úÖ Config –∑–∞–ø–∏—Å–∞–Ω"))

(defn call-sip [final-wav phone]
  (kill-existing-baresip)
  (ensure-baresip-config final-wav)
  (println "üìû –ù–∞—á–∏–Ω–∞–µ–º SIP-–≤—ã–∑–æ–≤:" phone)

  (println "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å SIP-—Å–µ—Ä–≤–µ—Ä–∞:" sip-domain)
  (try
    (let [{:keys [exit out err]} (sh "nc" "-z" "-u" sip-domain "5060")]
      (if (zero? exit)
        (println "‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
        (println "‚ö† –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:" err)))
    (catch Exception e
      (println "‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:" (.getMessage e))))

  (let [command ["baresip" "-f" baresip-home "-v" "-d"] ; -d –¥–ª—è –¥–æ–ø. –ª–æ–≥–æ–≤
        pb (doto (ProcessBuilder. command)
             (.redirectErrorStream true))
        process (.start pb)
        writer (java.io.BufferedWriter.
                (java.io.OutputStreamWriter. (.getOutputStream process)))
        reader (clojure.java.io/reader (.getInputStream process))
        output (atom [])]

    (try
      (let [reader-thread
            (future
              (try
                (doseq [line (line-seq reader)]
                  (swap! output conj line)
                  (println "[BARESIP]:" line))
                (catch Exception e
                  (println "‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –≤—ã–≤–æ–¥–∞ baresip:" (.getMessage e)))))]

        (println "‚è≥ –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ baresip...")
        (Thread/sleep 10000)

        (if-not (.isAlive process)
          (throw (Exception. "‚ùå Baresip –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")))

        (if (.exists (java.io.File. final-wav))
          (println "‚úÖ WAV-—Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:" final-wav)
          (throw (Exception. (str "‚ùå WAV –Ω–µ –Ω–∞–π–¥–µ–Ω: " final-wav))))

        (println "‚öô –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /ausrc")
        (.write writer (str "/ausrc aufile," final-wav "\n"))
        (.flush writer)
        (Thread/sleep 2000)

        (println "üìû –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /dial sip:" phone "@" sip-domain)
        (.write writer (str "/dial sip:" phone "@" sip-domain "\n"))
        (.flush writer)
        (Thread/sleep 60000) ; 60—Å –¥–ª—è –∑–≤–æ–Ω–∫–∞

        (println "üëã –û—Ç–ø—Ä–∞–≤–ª—è–µ–º /quit")
        (.write writer "/quit\n")
        (.flush writer)

        (println "‚è≥ –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è baresip...")
        (let [exit-code (.waitFor process 10000 TimeUnit/MILLISECONDS)]
          (println "‚Ñπ Baresip –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º:" exit-code))

        (future-cancel reader-thread))

      (catch Exception e
        (println "‚ùå –û—à–∏–±–∫–∞ SIP-–≤—ã–∑–æ–≤–∞:" (.getMessage e))
        (throw e))
      (finally
        (try (.close writer) (catch Exception _))
        (try (.close reader) (catch Exception _))
        (try
          (when (.isAlive process)
            (println "üõë –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º baresip")
            (.destroy process)
            (.waitFor process 2000 TimeUnit/MILLISECONDS))
          (catch Exception e
            (println "‚ö† –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è baresip:" (.getMessage e))))
        (println "üìú –õ–æ–≥ baresip:" (clojure.string/join "\n" @output))))))

(defn split-phones [s]
  (->> (clojure.string/split s #"[,\s]+")
       (remove clojure.string/blank?)))

(defn handle-call [{:keys [query-params]}]
  (let [{:strs [text phone]} query-params
        final "/tmp/final.wav"]
    (if (and text phone)
      (let [phones (split-phones phone)]
        (println "üó£ –°–∏–Ω—Ç–µ–∑ —Ç–µ–∫—Å—Ç–∞:" text)
        (audio/generate-final-wav-auto text final)
        (println "üìÅ WAV —Å–æ–∑–¥–∞–Ω:" final)
        (go
          (doseq [p phones]
            (try
              (call-sip final p)
              (println "üìû –í—ã–∑–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:" p)
              (catch Exception e
                (println "‚ùå –û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞" p ":" (.getMessage e))))))
        (resp/response (str "üìû –í—ã–∑–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: " (clojure.string/join ", " phones)
                            " –æ—Ç " sip-user "@" sip-domain)))
      (resp/bad-request "‚ùå –ù–µ—Ç ?text=...&phone=..."))))

(defroutes app-routes
  (GET "/call" [] handle-call)
  (GET "/health" [] (resp/response "OK")))

(def app
  (wrap-params app-routes))

(defn -main []
  (println (str "‚úÖ TTS SIP Caller –Ω–∞ –ø–æ—Ä—Ç—É 8899: " sip-user "@" sip-domain ":" sip-port))
  (run-jetty app {:port 8899}))